immer.js란?
react에서 불변성을 유지하는 코드를 작성하기 쉽게 해주는 라이브러리

불변성이란?
쉽게 말하면 상태를 변경하지 않는 것
상태를 변경하지 않으면서 원하는 상태를 바꾼다는게 어불성설이지만 react가 어떻게 컴포넌트를 유지하는지(기본 속성) 알면 왜 저런 말이 나오는지 이해하게 됩니다

react 기본 속성
react는 기본적으로 부모 컴포넌트가 리렌더링을 하면 자식 컴포넌트도 리렌더링하게 됩니다
즉, 얕은 비교를 통해 새로운 값인지 아닌지를 판단한 후 새로운 값인 경우 리렌더링을 하게 됩니다
여기서 얕은 비교란 간단히 말하자면 객체, 배열, 함수와 같은 참조 타입들을 실제 내부 값까지 비교하지 않고 동일 참조인지(동일한 메모리 값을 사용하는지)를 비교하는 것을 뜻합니다

state가 얕은 비교를 통해 컴포넌트가 리렌더링 된다
1. 우리가 컴포넌트를 리렌더링 해야하는 상황이 있다고 가정하고, 타입이 배열인 state를 바꿉니다.
2. 이때, state.push(1)을 통해 state 배열에 직접 접근하여 요소를 추가합니다.
3. 우리는 push 전과 다른 값이라고 생각하지만, 리엑트는 state라는 값은 새로운 참조값이 아니기 때문에 이전과 같은 값이라고 인식하고 리렌더링 하지 않습니다.

즉, 위 이유로 우리가 state를 바꾸고 돔을 다시 만들려면, 새로운 객체 or 배열을 만들어 새로운 참조값을 만들고, react에게 이 값은 이전과 다른 참조값임을 알려야하는 것입니다.

불변성 지키면서 state 바꾸기
배열
1) 배열에서 추가: concat
setUsers(state.array.concat(user));

2) 배열에서 삭제: filter
const onRemove = id => {
  // user.id 가 id 인 것을 제거
  setUsers(users.filter(user => user.id !== id));
};

3) 배열에서 수정: map
const onToggle = id => {
  setUsers(
    users.map(user =>
      user.id === id ? { ...user, active: !user.active } : user
    )
  );
};

객체
기존의 객체를 복사 후(...state) 추가, 삭제, 수정
1) 객체에서 추가
setState(state => {...state, key: value})

1) 객체에서 삭제
setState(state => {..._.omit(state, 'deleteKey')})

1) 객체에서 수정
setState(state => {...state, key: newValue})

