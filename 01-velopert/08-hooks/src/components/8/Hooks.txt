useState
- 상태를 관리할 때 사용하는 Hook
- 하나의 useState 함수는 하나의 상태값만 관리 할 수 있다
- 컴포넌트에서 관리해야 할 상태가 여러개라면 useState를 여러번 사용한다

<Syntax>
const [value, setValue] = useState(initial value)

value: 상태값
setValue: 해당하는 value의 상태를 업데이트하는 함수
useState(): 함수 안에는 value 상태의 초기값이 들어간다

useState 함수가 호출되면 배열 반환
첫번째 원소: 상태 값
두번째 원소: 상태를 설정하는 함수

--------------------------------------------------

useEffect
- 리액트 컴포넌트가 렌더링될 때마다 특정 작업을 수행하도록 설정하는 Hook
- 클래스형 컴포넌트에서 componentDidMount와 componentDidUpdate를 합친 형태
- 컴포넌트가 Mount되거나 Update될때 실행된다 
- 컴포넌트가 업데이트될때: 1) props가 바뀔때 2) state가 바뀔때 3) 부모 컴포넌트가 리렌더링이될때
- useEffect 함수는 기본적으로 렌더링되고 난 직후마다 실행되며 두번째 파라미터 배열에 무엇을 넣는지에 따라 실행되는 조건이 달라진다

<Syntax>
1. 컴포넌트가 마운트, 업데이트 될때마다 실행된다
useEffect(() => {
	<code>
});

2. 컴포넌트가 마운트될때만 실행된다
(= 컴포넌트가 화면에 맨 처음 렌더링될 때만 실행하고 업데이트될때는 실행하지 않을때)
=> 함수의 두번째 파라미터로 비어 있는 배열을 넣어준다
<Syntax> 
useEffect(() => {
	<code>
}, []);

3. 컴포넌트의 state값이 업데이트될때만 실행
=> 함수의 두번째 파라미터로 배열 안에 검사하고 싶은 값을 넣어준다
<Syntax> 
useEffect(() => {
	<code>
}, [state]);

4. 컴포넌트가 언마운트될때만 실행된다
=> return () => { <code> }를 useEffect 안에 넣어준다
<Syntax>
useEffect(() => {
	return () => { 
		<code> 
	}
}, [])

5. useEffect를 Unmoount될때
useEffect(() => {
	return () => {
		<code>
	}
}, [state])

a, b라는 state 값이 업데이트 되었을때 같은 실행코드를 수행하려면 같은 useEffect 내에 배열안에 넣어주고 그렇지 않다면 다른 useEffect 안에 넣어준다

case1
useeffect(() => {
 <code>
}, [a, b])

case2
useeffect(() => {
 <code>
}, [a])

useeffect(() => {
 <code>
}, [b])

--------------------------------------------------

useReducer
- useState보다 더 다양한 상태를 다른 값으로 업데이트해 주고 싶을때 사용하는 Hook

<Syntax>
const [state, dispatch] = useReducer(reducer, { value: 0 })

const [state, dispatch] = useReducer(reducer 함수, reducer의 기본값)
state: 현재 가리키고 있는 상태
dispatch: 액션을 발생시키는 함수

dispatch(action)
함수 안에 파라미터로 액션값을 넣어주면 reducer 함수가 호출된다

function reducer(state, action) {
	return { ... }
}
state: 현재 상태
action: 업데이트를 위해 필요한 정보를 담은 액션

--------------------------------------------------

useMemo
- 컴포넌트에서 발생하는 연산을 최적화해주는 Hook (변수버전의 최적화)

<Syntax>
useMemo(() => func(), [])
첫번째 파라미터: 어떻게 연산할지 정의하는 함수
두번째 파라미터: 1) 이 배열 안에 넣은 내용이 바뀌면 우리가 등록한 함수를 호출해서 값을 연산 2) 만약에 내용이 바뀌지 않았다면 이전에 연산한 값을 재사용

--------------------------------------------------

useCallback
- 렌더링 성능을 최적화해주는 Hook (함수버전의 최적화)
- 컴포넌트 안에 선언된 함수는 컴포넌트가 리렌더링이 될때마다 새로 함수를 다시 만들어준다
- 만들어 놨던 함수를 재사용할 수 있게 해준다
- 최적화는 가장 마지막에 해준다 (선개발 후최적화)

자바스크립트 코드로 useCallback의 핵심 개념 이해
case 1
함수가 10번 정의되고 10번 실행된다
for (let i = 0; i < 10; i++) {
	(function (j) {
		console.log(j + 1);
	})(i);
}

case 2
함수는 1번만 정의되고 10번 실행된다
function myFunc(i) {
	console.log(i + 1);
}
for (let i = 0; i < 10; i++) {
	myFunc(i);
}

일반 함수
등록 버튼이 클릭될때마다 함수가 새로 정의되고 실행된다
const onInsert = () => {
	const nextList = list.concat(parseInt(number));
	setList(nextList);
	setNumber('');
};
<button onClick={onInsert}>등록</button>

useCallback, []와 함께 사용된 경우
[]: 마운트 될때만 실행
함수는 마운트될때 한번만 정의되고 등록 버튼이 클릭될때는 정의된 함수가 실행만된다 
함수가 마운트될때만 정의되므로 만약 number, list의 값이 바뀌었을때는 업데이트된 값을 반영할 수 없다
즉 마운트될때 정의된 state값만 가지게 된다
const onInsert = useCallback(() => {
	const nextList = list.concat(parseInt(number));
	setList(nextList);
	setNumber('');
}, []);

useCallback, [state값]과 함께 사용된 경우
[state값]: state값이 변경될때마다 다시 실행해준다
함수는 마운트될때 한번 정의되고 state값이 변경되었을때마다 다시 정의해준다
const onInsert = useCallback(() => {
	const nextList = list.concat(parseInt(number));
	setList(nextList);
	setNumber('');
}, [name, list]);

<Syntax>
useCallback(생성하고 싶은 함수, 배열)
배열: 어떤 값이 바뀌었을 때 함수를 새로 생성해야 하는지 명시

useCallback(() => {<code>}, [])
=> 컴포넌트가 처음 렌더링될때만 함수 생성

useCallback(() => {<code>}, [a])
=> a라는 값이 바뀌었을 때만 함수 생성

--------------------------------------------------

useRef
- ref를 쉽게 사용할 수 있도록 해주는 Hook
- useRef를 사용하여 ref를 설정하면 useRef를 통해 만든 객체 안의 current 값이 실제 엘리먼트를 가리킨다
- i.e.) 포커스가 인풋 쪽으로 넘어가도록 할때

useRef의 두가지 역할
1. 특정 태그를 가리키고 싶을때
<input ref={inputEl}></input>
inputEl.current.focus();

2. 컴포넌트 리렌더링을 일으키지 않는 값을 지정하고 싶을때 (state는 값이 업데이트 될때마다 컴포넌트가 리렌더링이 된다)
const num = useRef(0)
num ++