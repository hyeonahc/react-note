리액트에서 컴포넌트를 스타일링하는 4가지 방법

1. 일반 CSS
- 컴포넌트를 스타일링하는 가장 기본적인 방식
- CSS 클래스를 중복되지 않게 만들어야함
- CSS 클래스가 중복되는 것을 방지하기 위해 1) 이름을 지을 때 특별한 규칙을 사용하거나 2) CSS selector를 활용한다

CSS 클래스 이름 짓기
이름을 지을 때 특별한 규칙을 사용하기
1) 컴포넌트이름-클래스형태
i.e.) App-header
2) BEM 네이밍: Block__Element-Modifier
class="컴포넌트이름__역할—세부특징"
i.e.) card__title-primary

CSS selector를 활용
컴포넌트의 최상위 html 요소에는 컴포넌트의 이름으로 클래스이름을 짓고(.App)
그 내부에서는 소문자를 입력하거나(.logo) header 같은 태그를 사용
i.e.) .App .logo

----------------------------------------------------------------------------------------------------

2. Sass
- yarn add sass로 sass라이브러리를 설치해야함
- 라이브러리는 Sass를 CSS로 변환시켜줌
- CSS의 전처리기 중 하나
- CSS를 더 쉽게 작성할 수 있게 해줌
- 스타일 코드의 재활용성을 높여줌
- 코드의 가독성을 높여 유지 보수를 더 쉽게 해줌
- 두가지 확장자 .scss와 .sass를 지원한다

.sass vs .scss
.sass: {중괄호}와 세미콜론(;)을 사용하지 않음
$font-stack: Helvetica, sans-serif
$primary-color: #333
body
	font: 100% $font-stack
	color: $primary-color

.scss: css와 유사
$font-stack: Helvetica, sans-serif;
$primary-color: #333;
body {
	font: 100% $font-stack;
	color: $primary-color;
}

Sass 문법
1. 변수 사용하기
2. 믹스인 만들기: 재사용되는 스타일 블록을 함수처럼 사용
3. 네스팅하기: 부모 > 자식묶기

utils 함수 분리하기
Scss 변수, 믹스인은 utils.scss로 따로 분리하여 작성한 뒤 필요한 곳에서 불러와 사용할 수 있다
@import './styles/utils.scss';

sass-loader 설정 커스터마이징하기
프로젝트 디렉토리를 많이 만들어 구조가 깊어졌다면 해당 파일에 접근할때 상위 폴더로 한참 거슬러 올라가야 한다는 단점이 생긴다
i.e.) @import '../../../styles/utils';
=> 웹팩에서 Sass를 처리하는 sass-loader의 설정을 커스터마이징하여 해결

sass-loader에 접근하는 방법
create-react-app으로 만든 프로젝트는 프로젝트 구조의 복잡도를 낮추기 위해 웹팩 관련된 세부 설정이 숨겨져 있다
yarn eject 명령어로 create-react-app으로 만든 프로젝트의 세부설정을 밖으로 꺼내준다
yarn eject를 하기전에 커밋을 먼저 해주어야 한다 git commit -m "Commit before yarn eject"
=> config > webpack.config.js 파일을 수정한다
1) sass-loader를 수정해 깊어진 디렉토리를 간단하게 바꿀 수 있다
i.e.) @import '../../../styles/utils.scss'; => @import 'utils.scss'
2) sass-loader에 additionalData 옵션을 설정하면 모든 Sass파일에 utils.scss를 포함시킬 수 있다

node_modules에서 라이브러리 불러오기
yarn을 통해 설치한 라이브러리를 사용하기: 상대 경로를 사용하여 node_modules까지 들어가서 불러오는 방법
i.e.) @import '../../../node_modules/library/styles'
깊어진 경로를 물결문자(~)로 표현해줄 수 있다
물결 문자를 사용하면 자동으로 node_modules에서 라이브러리 디렉토리를 탐지한다
i.e.) @import '~library/styles'

----------------------------------------------------------------------------------------------------

3. CSS Module
파일마다 고유한 이름을 자동으로 생성해 스타일을 작성할 때 CSS 클래스가 다른 CSS 클래스의 이름과 절대 충돌하지 않도록 해주는 기술
자동으로 클래스 이름을 고유한 값으로 만들어서 컴포넌트 스타일 클래스 이름이 중첩되는 현상을 방지해주는 기술
형식: [파일 이름]_[클래스 이름]_[해시값]

CSS Module 사용하기
- 파일이름.module.css 확장자로 파일을 저장하면 CSS Module이 적용

import styles from './CSSModule.module.css';
CSS Module이 적용된 스타일 파일을 불러오면 객체를 하나 전달받는다
CSS Module에서 사용한 클래스 이름과 해당 이름을 고유화한 값이 키-값 형태로 들어 있다
console.log(styles);
{wrapper: 'CSSModule_wrapper__auxSw', inverted: 'CSSModule_header__ESvrm'}
{className: '[파일 이름]_[클래스 이름]_[해시값]'}

CSSModule.module.css
.wrapper {
  <style code>
}
className={styles.wrapper}로 접근

글로벌 CSS를 작성하고 싶으면 :global
:global .wrapper {
	<style code>
}
로컬 CSS를 작성하고 싶으면 :local
:local .wrapper {
	<style code>
}
className="wrapper"으로 접근

CSS Module에서 클래스가 한개일때는 
className={styles.wrapper}

CSS Module에서 클래스가 두개 이상일때는 
1) 템플릿 리터럴로 넣어준다
className={`${styles.wrapper} ${styles.inverted}`}

2) 배열의 함수 join으로 넣어준다
className={[styles.wrapper, styles.inverted].join(' ')}

3.1 classnames
- 라이브러리 설치: yarn add classnames
- 컴포넌트에서 조건부로 CSS 클래스를 설정할 때 편리하다
- 문자열을 만들어준다

classnames 사용법
import classNames from 'classnames';

classNames('one', 'two') 												=> 'one two'
classNames('one', { two: true })								=> 'one two'
classNames('one', { two: false })								=> 'one'
classNames('one', ['two', 'three'])							=> 'one two three'
const myClass = 'hello'
classNames('one', myClass, {myCondition: true})	=> 'one hello myCondition'

props값에 따라 다른 스타일주기
예시1) className 라이브러리 사용
<MyComponent highlighted={true} theme={"bg-red"} />
const MyComponent = ({highlighted, theme}) => (
	<div className={classNames('MyComponent', {highlighted}, theme)}>Hello</div>
);
<div className='MyComponent highlighted bg-red'}>Hello</div>
비구조화할당문법
<div className={classNames('MyComponent', {highlighted}, theme)}>Hello</div>
<div className={classNames('MyComponent', {highlighted: highlighted}, theme)}>Hello</div>

예시2) className 라이브러리 사용 X
const MyComponent = ({highlighted, theme}) => (
	<div classNames=`MyComponent ${highlighted ? 'highlighted' : ''} ${theme}`>Hello</div>
);

CSS Module + classNames의 bind 함수 같이 사용하기
예시1) bind 함수를 사용할 때
import classNames from 'classnames/bind'
import styles from './CSSModule.module.css';
const Component = () => {
	return (
		<div className={`${styles.wrapper} ${styles.inverted}`}></div>
	)
}

예시2) bind 함수를 사용하지 않을때
import styles from './CSSModule.module.css';
const cx = classNames.bind(styles);
const Component = () => {
	return (
		<div className={cx('wrapper', 'inverted')}></div>
	)
}
----------------------------------------------------------------------------------------------------

4. styled-components
- 스타일을 css나 sass 외부 파일로 만드는것이 아닌 자바스크립트 파일에 내장시키는 방식
- CSS-in-JS: 자바스크립트 파일 안에 스타일을 선언
- CSS-in-JS 라이브러리의 종류: styled-components, emoticon
- 스타일을 작성함과 동시에 해당 스타일이 적용된 컴포넌트를 만들 수 있게 해줌
- styled-components 라이브러리 설치: yarn add styled-components
- styled-components 신텍스 하이라이팅 해주는 extension: vscode-styled-components
- 자체적으로 클래스를 만들고 그 안에 설정한 스타일링이 들어간다

styled components의 장점
1) 자바스크립트 파일 하나에 스타일까지 작성할 수 있기 때문에 스타일 파일을 따로 만들지 않아도 된다
2) props 값으로 전달해주는 값을 쉽게 스타일에 적용할 수 있다

